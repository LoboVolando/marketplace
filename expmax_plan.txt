Структура проекта


Установка проекта
Для установки исходника интернет магазина необходимо ввести следующую команду:

git clone https://gitlab.skillbox.ru/learning_materials/python_django_team5.git

Чтобы проект работал корректно, необходимо установить зависимости командой:

git install requrements.txt

В случае если нужно установить проект для доработки, правки, или последующей разработке, следует использовать команду:

git install dev_requrements.txt

После Того, как все зависимости будут установлены, необходимо создать и заполнить файл виртуального окружения .env по образцу env.template

Если вы хотите посмотреть структуру всех ссылок и страниц, необходимо ввести команду:

/manage.py import_url

В результате этой команды в корневой папке проекта будет создан excel-файл с таблицей ссылок и страниц

Следующим шагом будет создание суперпользователя для управления и доступа в админ-панель. Сделать это можно командой:

/manage.py createsuperuser

Также предусмотрена возможность заполнения проекта тестовыми данными:

/manage.py loadscript no_clear

При этом нет необходимости вызывать команду createsuperuser, так как таковой уже имеется в тестовых данных. Всего же будет создано 4 пользователя со следующими данными:

<данные пользователей>

Модель пользователя

В проекте была использована собственная модель пользователя, унаследованная от класса AbstractBaseUser. Помимо полей, уществующий в стандартной модели пользователей, были добавлены поля "аватар", "город", "адрес", "телефон". Преимуществом этого подхода является избежание дополнительного запроса на каждого пользователя в дополняющую стандарнтую модель. Также в модели пользователя был переопределен метод save - добавлена проверка размерности загружаемого файла аватара, а также удаление старого файла при изменении аватара:

    def save(self, *args, **kwargs) -> None:
        check_image_size(self.avatar)
        if self.pk is not None:
            old_self = User.objects.get(pk=self.pk)
            if old_self.avatar and self.avatar != old_self.avatar:
                old_self.avatar.delete(False)
        super(User, self).save(*args, **kwargs)

Для удобства доступа к ссылке аватара был добавлен метод avatar_url:

    @property
    def avatar_url(self):
        if self.avatar and hasattr(self.avatar, 'url'):
            return self.avatar.url

Также добавлены права доступа для пользователей, для последующего создания групп:
1. Контент-менеджер - пользователи с полным доступом в админ-панель
2. Продавцы - без доступа в админ-панель, но имеющие доступ в специальный раздел для продавцов в личном кабинете

Аутентификация и регистрация пользователей:

Аутентификация и регистрация пользователей реализована по e-mail адресу. Чтобы войти на сайт, необходимо ввести свой email и пароль на странице логина, в случае если пользователь не зарегистрирован - зарегистрироваться

Также имеется возможность входа на сайт через сторонние сервисы. По умолчанию таковых доступно лишь 2: через google и через vk. Однако процедура добавления дополнительных сторонних сервисов довольно проста. Данный сервис реализован с помощью подключаемого приложения django-allauth, который уже имеет множество доступных сервисов (они представлены в файле <>). Чтобы подключить один из них, необходимо всего 4 шага:
1. Добавить в файл вирутального окружения переменную:
INSTALLED_APPS='allauth.socialaccount.<название сервиса>' (в случае добавления сразу нескольких - указывать через запятую)

2. Для фронтенда - добавить в папку /static/assets/img/icons/socialContent/ файл иконки <название сервиса>.svg размером 16px X 16px

3. На выбранном стороннем сервисе создать api-приложение

4. Через админ-панель добавить сервис в social applications, скопировав из п.3 ключи доступа

Личный кабинет
Для всех пользователей
После регистрации и аутентификации пользователю будет доступет личный кабинет. В нем есть возможность отредактировать введенные при регистрации данные, изменить/добавить аватар. В техническом плане это реализовано через стандартные средства django. Также в личном кабинете представлены последние ордера и несколько последних просмотренных товаров, с кнопками на полные списки.
Для продавцов
В случае если пользователь приналежит группе 'Продавцы', ему будет доступен кабинет продавцов в личном кабинете. В данном кабинете релазиованы следующие сервисы:
- создание, удаление и редактирование магазинов
- создание, удаление и редактирование товаров этих магазинов, а также импорт товаров из файла
- запрос на добавление нового базового товара
- создание удаление и редактирование скидок(3х типов)
Все методы реализации представлены в приложении stores_app.services. Для работы с моделями используется миксин StoreServiceMixin, содержащий следующие методы:
    get_store(slug) - получение магазина по его slug-полю
    get_user_stores(user) - получение всех магазинов пользователя user
    get_viewed_products(user) - получение списка просмотренных товаров пользователем user
    get_base_products(query_params) - Получение базовых продуктов. Если аргументы не переданы, то возвращает список всех продуктов. Также можно указать категорию. Другие параметры выборки не реализованы, однако они простым способом добавляются, если понадобиться получить иной список базовых продуктов
    get_all_orders(user)
    get_last_order(user)
    request_add_new_product(product, user)

    create_***(data) - методы для создания указанного в имени метода объекта, принимает аргумент data, содержащий данные из соответствующей формы
    edit_***(data, instance) - методы для редактирования instance указанного в имени метода объекта, data - данные из формы
    get_***(user) - методы получения всех указанного в имени метода объекта. у get_seller_products есть аргумент calculate_prices принимает True или False, так как не всегда мы хотим получить список продуктов с ценами с учетом скидок
    remove_***(request) - методы удаления указанного в имени метода объекта. id удаляемого экземпляра берется из request, а в request передается сообщение об успешном удалении экземпляра

Административная панель
-Приложения
	-продукты
	-запрос на продукт
	-пользователи
-Администрирование
-Настройки
	- очистка кешей
	- настройки каталога на главной
	- сигналы

Главная страница
-ограниченный тираж
-случайные категории
-горячие предложения
-популярные товары

Детальная страница товара
-Отзывы
-Информация о товаре(средняя цена, добавление в корзину)
-Продавцы
